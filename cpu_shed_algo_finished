import copy

class processes_non_preemptive: #for organization of processes
    def __init__(self, id, at, bt, ct): #parameters
        self.id = id
        self.at = at
        self.bt = bt
        self.ct = ct
        self.tat = self.ct-self.at #turnaround time calculation
        self.wt = self.tat-self.bt #waiting time calculation
    def display_non_preemptive(self): #display each processes for the table
        print(f"P{self.id}\t{self.at}\t{self.bt}\t{self.ct}\t{self.tat}\t{self.wt}")

    def gantt_chart_id(self): #display each unsorted process id for gantt chart
        print(f"    P{self.id}", end="  ")

    def gantt_chart_ct(self):#display each ct completion time for gantt chart
        print(f"\t{self.ct}", end="")

    # Used to get the average tat turnaround time and wt waiting time 
    def turnaround(self):
        return self.tat

    def waiting(self):
        return self.wt
    
class processes_preemptive: # for organization of processes
    def __init__(self, id, at, bt, ct, fs): #parameters
        self.id = id #process id
        self.at = at #process arrival time
        self.bt = bt #process burst time
        self.ct = ct #process completion time
        self.fs = fs #process first seen, first seen is when the first time the process started 
        self.tat = self.ct-self.at #turnaround time calculation
        self.wt = self.tat-self.bt #waiting time calculation
        self.rt = self.fs-self.at #response time calculation

    #used to get the average tat, wt and rt
    def display_preemptive(self):
        print(f"{self.id}\t{self.at}\t{self.bt}\t{self.ct}\t{self.tat}\t{self.wt}\t{self.rt}")

    def turnaround(self):
        return self.tat

    def waiting(self):
        return self.wt
    
    def response(self):
        return self.rt
    
def validateInt(validNum, range1, range2): # Error handling in-case of character input
    while True:# While the input is out of range or a charcter
        try: 
            validNum = int(validNum) 
            if validNum < range1 or validNum > range2: # Number inputted was out of range
                print(f"Must be at least {range1} and no more than {range2}.")
                validNum = input("Please enter the number again: ")
            else: # Correct user input
                return validNum
        except ValueError: # Value Error encoutered, a character was inputed
            print("Invalid entry; must be a number without characters!")
            validNum = input("Please enter the number again: ")

def user_input()->None:
    num: int = (input("Enter the Number of Processes: "))
    num = validateInt(num, 2, 100) # Error handling in-case of character input or out-of-range

    print("\n")
    process: list = []
    for i in range(1, num+1):
        print(f'Process {i}')
        at: int= (input("Enter the Arrival Time: ")) # To get Arrival Time
        at = validateInt(at, 0, 100) # Error handling in-case of character input or out-of-range
        bt: int = (input("Enter the Burst Time: ")) # To get Burst tTime
        bt = validateInt(bt, 0, 100) # Error handling in-case of character input or out-of-range
        process_info = {"id": i, "at": at, "bt": bt} # Entry to be appended to the process
        process.append(process_info)
        print("\n")
  
    return num, process

def user_input_priority(): # same with user_input but this is for priority to get pl
    num = int(input("Enter the Number of Processes: "))
    print("\n")
    process = []

    for i in range(num):
        print(f'Process {i + 1}')
        at = int(input("Enter the Arrival Time: "))
        bt = int(input("Enter the Burst Time: "))
        pl = int(input("Enter the Level of Priority: "))
        process_info = {"id": i + 1, "at": at, "bt": bt, "pl": pl}
        process.append(process_info)
        print("\n")
    
    return num, process

def user_input_round_robin():  # same with user_input but this is for round_robin to get time_slice
    num = int(input("Enter the Number of Processes: "))
    print("\n")
    process = []

    for i in range(num):
        print(f'Process {i + 1}')
        at = int(input("Enter the Arrival Time: "))
        bt = int(input("Enter the Burst Time: "))
        process_info = {"id": i + 1, "at": at, "bt": bt}
        process.append(process_info)
        print("\n")
    time_slice = int(input("Enter How much Time-slice: "))
    
    return num, process, time_slice

def first_come_first_serve_algo(process: list):
    # Sort processes by arrival time
    fcfs_algo = sorted(process, key=lambda x: x["at"])
    return fcfs_algo

def shortest_job_first_algo(process: list):
    # Sort processes by arrival time initially
    sjf_algo = sorted(process, key=lambda x: x["at"])
    
    completed_processes = []  # List to store completed processes with calculated completion times
    current_time = 0  # Start at time 0

    # While True continue until all processes are handled
    while sjf_algo:
        # List of processes that have arrived by current_time
        available_processes = [p for p in sjf_algo if p["at"] <= current_time]

        if available_processes:
            # The process with the smallest burst time from available ones
            shortest_process = min(available_processes, key=lambda x: x["bt"])
            sjf_algo.remove(shortest_process)  # Remove selected process from the original list

            # Calculate the current_time for the selected process
            current_time += shortest_process["bt"]
            completed_processes.append(shortest_process)
        else:
            # If no processes are available, move current_time to the next arrival time
            current_time = sjf_algo[0]["at"]

    return completed_processes
    
def priority_non_preemptive_algo(process: list):
    priority_algo = sorted(process, key=lambda x: x["at"])
    
    completed_processes = []  # List to store completed processes with calculated completion times
    current_time = 0  # Start at time 0
    
    while priority_algo:
        # List of processes that have arrived by current_time
        available_processes = [p for p in priority_algo if p["at"] <= current_time]

        if available_processes:
            # The process with the highest priority from available ones
            priority_process = min(available_processes, key=lambda x: x["pl"])
            priority_algo.remove(priority_process)  # Remove selected process from the original list

            # Calculate current_time for the selected process
            current_time += priority_process["bt"]
            completed_processes.append(priority_process)
        else:
            # If no processes are available, move current_time to the next arrival time
            current_time = priority_algo[0]["at"]

    return completed_processes

def highest_response_ratio_next_algo(process: list):
    hrrn_algo = sorted(process, key=lambda x: x["at"])
    
    completed_processes = []  # List to store completed processes with calculated completion times
    current_time = 0  # Start at time 0
    
    while hrrn_algo:
        # List of processes that have arrived by current_time
        available_processes = [p for p in hrrn_algo if p["at"] <= current_time]

        if available_processes:
            #Response ratio for available process
            for p in available_processes:
                p["rr"] = ((current_time - p["at"])+p["bt"])/p["bt"]
            # The process with the Highest Response Ratio from available ones
            highest_rr = max(available_processes, key=lambda x: x["rr"])
            hrrn_algo.remove(highest_rr)  # Remove selected process from the original list

            # Calculate current_tme for the selected process
            current_time += highest_rr["bt"]
            completed_processes.append(highest_rr)
        else:
            # If no processes are available, move current_time to the next arrival time
            current_time = hrrn_algo[0]["at"]

    return completed_processes

def shortest_remaining_time_first_algo(process: list):
    srtf_algo = sorted(process, key=lambda x: x["at"]) 
    completed_process = []
    current_time = 0
    first_response_times = {}
    gantt_chart_list = []
    copy_srtf = copy.deepcopy(process)
    copy_srtf = sorted(copy_srtf, key=lambda x: x["at"])

    while srtf_algo:
        available_process = [p for p in srtf_algo if p["at"] <= current_time and p["bt"] > 0]

        if available_process:
            shortest_time = min(available_process, key=lambda x: x["bt"])

            # Condition to get the fs first seen 
            if shortest_time["id"] not in first_response_times: #each process will be validated if it is already in first_respnse_time
                first_response_times[shortest_time["id"]] = current_time # the current time will be the basis if when it was first seen
                shortest_time["fs"] = current_time

            current_time +=1 # current time is incrimented for only 1 sec/min 
            shortest_time["bt"] -= 1 # the bt is dicremented by 1 because it had been processed by 1 only

            # For gantt chart to identify how much time each process was processed
            if not gantt_chart_list or gantt_chart_list[-1]["id"] != shortest_time["id"]:
                gantt_chart_dict = {"id": shortest_time["id"], "ct": current_time}
                gantt_chart_list.append(gantt_chart_dict)
            else:
                gantt_chart_list[-1]["ct"] = current_time

            #if the process has 0 burst time the process will be appended and it has completed its process
            if shortest_time["bt"] == 0:
                fs_id = first_response_times[shortest_time["id"]]
                # Create a new dictionary for the completed process with the original burst time
                completed_entry = {
                    "id": shortest_time["id"],
                    "at": shortest_time["at"],
                    "ct": current_time,  
                    "fs": fs_id
                    }
                completed_process.append(completed_entry) # Appending the completed process
                srtf_algo.remove(shortest_time)  # Remove the completed process from the main list
        else:
            current_time = srtf_algo[0]["at"]

    completed_process_list: list = []
    completed_process = sorted(completed_process, key=lambda x:x["at"])
    for i, p in enumerate(completed_process):
        p["bt"] = copy_srtf[i]["bt"]
        completed_process_list.append(processes_preemptive(p["id"], p["at"], p["bt"], p["ct"], p["fs"]))
                             
    return completed_process_list, gantt_chart_list

def priority_preemptive_algo(process: list): # Same process with SRTF but this use pl to determine who comes first
    priority_preem_algo = sorted(process, key=lambda x: x["at"])
    completed_process = []
    current_time = 0
    first_response_times = {}
    gantt_chart_list = []
    copy_priority = copy.deepcopy(process)
    copy_priority = sorted(copy_priority, key=lambda x: x["at"])

    while priority_preem_algo:
        available_process = [p for p in priority_preem_algo if p["at"] <= current_time and p["bt"] > 0]

        if available_process:
            priority_process = min(available_process, key=lambda x: x["pl"]) # Use of pl priority level to identify who comes first

            if priority_process["id"] not in first_response_times:
                first_response_times[priority_process["id"]] = current_time
                priority_process["fs"] = current_time

            current_time +=1
            priority_process["bt"] -= 1

            if not gantt_chart_list or priority_process["id"] != gantt_chart_list[-1]["id"]:
                gantt_chart_lib = {"id": priority_process["id"], "ct": current_time}
                gantt_chart_list.append(gantt_chart_lib)
            else:
                gantt_chart_list[-1]["ct"] = current_time
            
            if priority_process["bt"] == 0:
                fs_id = first_response_times[priority_process["id"]]
                # Create a new dictionary for the completed process with the original burst time
                completed_entry = {
                    "id": priority_process["id"],
                    "at": priority_process["at"],
                    "ct": current_time,  
                    "fs": fs_id
                    }
                completed_process.append(completed_entry)
                priority_preem_algo.remove(priority_process)  # Remove the completed process from the main list
        else:
            current_time = priority_preem_algo[0]["at"]

    completed_process_list: list = []
    completed_process = sorted(completed_process, key=lambda x:x["at"])
    for i, p in enumerate(completed_process):
        p["bt"] = copy_priority[i]["bt"]
        completed_process_list.append(processes_preemptive(p["id"], p["at"], p["bt"], p["ct"], p["fs"]))
                             
    return completed_process_list, gantt_chart_list

def round_robin_algo(process: list, time_slice: int):
    round_robin_algo = sorted(process, key=lambda x: x["at"])
    completed_process = []
    current_time = 0
    first_response_times = {}
    gantt_chart_list = []
    rr_process_copy = copy.deepcopy(process)
    rr_process_copy = sorted(rr_process_copy, key=lambda x: x["at"])

    while round_robin_algo:
        available_process = [p for p in round_robin_algo if p["at"] <= current_time and p["bt"] > 0]
            
        if available_process:
            arrived_first = available_process[0]

            if arrived_first["id"] not in first_response_times:
                first_response_times[arrived_first["id"]] = current_time
                arrived_first["fs"] = current_time

            if arrived_first["bt"] >= time_slice:
                current_time += time_slice
                arrived_first["bt"] -= time_slice
            else:
                current_time += arrived_first["bt"]
                arrived_first["bt"] = 0

            if not gantt_chart_list or arrived_first["id"] != gantt_chart_list[-1]["id"]:
                gantt_chart_lib = {"id": arrived_first["id"], "ct": current_time}
                gantt_chart_list.append(gantt_chart_lib)
            else:
                gantt_chart_list[-1]["ct"] = current_time
            
            if arrived_first["bt"] == 0:
                fs_id = first_response_times[arrived_first["id"]]
                # Create a new dictionary for the completed process with the original burst time
                completed_entry = {
                    "id": arrived_first["id"],
                    "at": arrived_first["at"],
                    "ct": current_time,  
                    "fs": fs_id
                    }
                completed_process.append(completed_entry)
                round_robin_algo.remove(arrived_first)  # Remove the completed process from the main list
            if arrived_first in round_robin_algo: # To check if arrived_first is still in the list of round_robin
                available_process = [p for p in round_robin_algo if p["at"] <= current_time] # To get the process with available time
                if available_process: # Remove and insert algo to its appropriate place in round_robin
                    insert_index = round_robin_algo.index(available_process[-1])
                    round_robin_algo.remove(arrived_first)
                    round_robin_algo.insert(insert_index, arrived_first)
        else:
            current_time = round_robin_algo[0]["at"]

    completed_process_list: list = []
    completed_process = sorted(completed_process, key=lambda x:x["at"])
    for i, p in enumerate(completed_process):
        p["bt"] = rr_process_copy[i]["bt"]
        completed_process_list.append(processes_preemptive(p["id"], p["at"], p["bt"], p["ct"], p["fs"]))
                             
    return completed_process_list, gantt_chart_list

def default(): # No CPU Scheduling algorithm choosen
    print("CPU-Scheduling Algotithm selected is either none of the choices or nothing selected.")
    print("Closing the program.")
    quit()

def cpu_scheduling_algo_type():
    cpu_scheduling_algorithms = {
        "A": first_come_first_serve_algo,
        "B": shortest_job_first_algo,
        "C": priority_non_preemptive_algo,
        "D": highest_response_ratio_next_algo,
        "E": shortest_remaining_time_first_algo,
        "F": priority_preemptive_algo,
        "G": round_robin_algo
    }
    print("'A' - First Come First Serve\n'B' - Shortest Job First\n'C' - Priority Non-Pre-Emptive\n'D' - Highest Response Ratio Next")
    print("'E' - Shortest Remaining Time First\n'F' - Priority Pre-Emptive\n'G' - Round Robin")
    option = input("Enter CPU-Scheduling Algorithm: ").upper()
    # User will choose what type of CPU Scheduling
    scheduling_type = cpu_scheduling_algorithms.get(option, None)

    if option == "G":
        num, process, time_slice = user_input_round_robin()
        return num, option, scheduling_type(process, time_slice)

    elif option in ('C', 'F'): # for preemptive and non_preemptive priority
        num, process = user_input_priority() # process/es user input
        return num, option, scheduling_type(process)
    
    elif scheduling_type: # Other CPU Scheduling Algorithm
        num, process = user_input()
        return num, option, scheduling_type(process)
    
    else:
        default() # If user enter none or none on the list

def final_calculation_non(l: list): # Calculate completion time for each process
    final_process_list = []
    ct = 0
    for i, process in enumerate(l):
        if i == 0:
            ct = process["bt"] # first process of ct is equal to the burst time
        else:
            ct += process["bt"]  # Adding to the previous ct to the current bt

        # Append Process object to the final list
        final_process_list.append(processes_non_preemptive(process["id"], process["at"], process["bt"], ct))
    return final_process_list

    # Sort the final list by process ID
def sorted_completed_list(completed_process: list):
    sorted_completed_process = sorted(completed_process, key=lambda x: x.id)
    return sorted_completed_process

def calculate_ave_non_preem(num: int, l: list):
    avg_tat = 0 # turnaround time and waiting time iniate at 0
    avg_wat = 0
    for process in l:
        avg_tat += process.turnaround()
        avg_wat += process.waiting()
    final_tat: float = (f"{avg_tat/num:.2f}") # average of tat and wat programmed with 2 decimals
    final_wt: float = (f"{avg_wat/num:.2f}")
    return final_tat, final_wt

def calculate_ave_preem(num: int, sorted_completed_process: list):
    avg_tat = 0 # turnaround time and waiting time iniate at 0
    avg_wt = 0
    avg_rt = 0
    for process in sorted_completed_process:
        avg_tat += process.turnaround()
        avg_wt += process.waiting()
        avg_rt += process.response()
    final_tat: float = (f"{avg_tat/num:.2f}") # average of tat, wt, rt programmed with 2 decimals
    final_wt: float = (f"{avg_wt/num:.2f}")
    final_rt: float = (f"{avg_rt/num:.2f}")
    return final_tat, final_wt, final_rt

def display_non_preem(l: list, fcfs_algo:list, final_tat: float, final_wt: float):
    # Gannt Chart Output
    print("\nGantt Chart")
    for process in fcfs_algo: 
        process.gantt_chart_id()

    print("\n0", end="")

    for process in(fcfs_algo):
        process.gantt_chart_ct()

    #Table Output
    print("\n\nPID\tAT\tBT\tCT\tTAT\tWT") # Display header
    for process in l: # display each user input and calculation
        process.display_non_preemptive()
    print(f"\t\t    Average    {final_tat}    {final_wt}") # display average final_tat and final_wt
    print("\nThank you for using the program!")

def display_preem(sorted_completed_process: list, gantt_chart_list: list, final_tat: float, final_wt: float, final_rt: float): 
    # Gannt Chart Output
    print("\nGantt Chart")
    for i, process in enumerate(gantt_chart_list): 
        print(f"    P{gantt_chart_list[i]['id']}", end="  ")

    print("\n0", end="")

    for i, process in enumerate(gantt_chart_list):
        print(f"\t{gantt_chart_list[i]['ct']}", end="")

    #Table Output
    print("\n\nPID\tAT\tBT\tCT\tTAT\tWT\tRT") # Display header
    for process in sorted_completed_process: # display each user input and calculation
        process.display_preemptive()
    print(f"\t\t    Average    {final_tat}    {final_wt}    {final_rt}") # display average final_tat, final_wt and final_rt
    print("\nThank you for using the program!")

def main():
    num, option, scheduling_type = cpu_scheduling_algo_type()
    if option in {"A", "B", "C", "D"}:
        final_process_list = final_calculation_non(scheduling_type)
        sorted_process_list = sorted_completed_list(final_process_list)
        final_tat, final_wt = calculate_ave_non_preem(num, final_process_list)
        display_non_preem(sorted_process_list, final_process_list, final_tat, final_wt)
    if option in {"E", "F", "G"}:
        completed_process_list, gantt_chart_list = scheduling_type
        final_process_list = sorted_completed_list(completed_process_list)
        final_tat, final_wt, final_rt = calculate_ave_preem(num, final_process_list)
        display_preem(final_process_list, gantt_chart_list, final_tat, final_wt, final_rt)

if __name__ == '__main__':
    main()